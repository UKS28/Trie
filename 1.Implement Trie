/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */
struct Node {
    Node *arr[26];
    bool flag =false;
    bool isContains(char ch) {
        return arr[ch-'a'] != nullptr;
    }
    // setting and fetting reference
    void put(char ch, Node *node) {
        arr[ch-'a'] = node;
    }
    Node* get(char ch) {
        return arr[ch -'a'];
    }

    // setting and getting end
    void setEnd() {
        flag = true;
    }
    bool isEnd() {
        return flag;
    }
};


class Trie {

public:
    Node * root;

    /** Initialize your data structure here. */
    Trie() {
         root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
       Node *curr = root;
       for(char &ch :word) {   
           if(!curr->isContains(ch)) {
               curr->put(ch, new Node());
           }
           curr = curr->get(ch);
       }
       curr->setEnd();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
      Node *curr = root;
      for(char &ch : word) {
          if(!curr->isContains(ch)) {
              return false;
          }
          curr = curr->get(ch);
      }
      return curr->isEnd();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
      Node *curr = root;
      for(char &ch : prefix) {
          if(!curr->isContains(ch)) {
              return false;
          }
          curr = curr->get(ch);
      }
      return true;
    }
};
