#include <bits/stdc++.h> 
struct Node {
    Node* children[26];
    bool flag = false;

    bool isContains(char ch) {
        return children[ch-'a'] != nullptr;
    }
    void put(char ch, Node* node) {
        children[ch-'a'] = node;
    }

    Node* get(char ch) {
        return children[ch - 'a'];
    }

    void setEnd() {
        flag = true;
    }

    bool getEnd() {
        return flag;
    }   

};

class Trie {
    public :
    Node* root;
    Trie() {
        root = new Node();
    }

    void insert(string &word) {
        Node* curr = root;
        for(char &ch : word) {
            if(!curr->isContains(ch)) {
                curr->put(ch, new Node());
            }
            curr = curr->get(ch);
        }
        curr->setEnd();
    }

    bool isValid(string &word) {
        Node* curr = root;
        for(char &ch : word) {
            if(!curr->isContains(ch)) {
                return false;
            }
            curr = curr->get(ch);
            if(!curr->getEnd()) return false;
        }
        return true;
    }
};
string completeString(int n, vector<string> &a){
    Trie tr;
    for(string &str : a) {
       tr.insert(str);
    }
    int prev = 0;
    string res; 
    for(string &str : a) {
        if(tr.isValid(str)) {
            int len = str.length();
            if( len > prev) res = str, prev = len;
            else if(len == prev && str < res) {
                res = str;
            }
        }
    }
    return res.empty() ? "None" : res;
}
