struct Node {
    Node* children[26];
    bool isContains(char ch) {
        return children[ch - 'a'] != nullptr;
    }
    void put(char ch, Node* node) {
        children[ch - 'a'] = node;
    }
    Node* get(char ch) {
        return children[ch - 'a'];
    }
};

class Trie {
    public:
    Node* root;
    int dist = 1;

    Trie() {
        root = new Node();
    }
    void insert(string &word) {
        Node* curr = root;
        for(char &ch : word) {
            if(!curr->isContains(ch)) {
                curr->put(ch, new Node());
                dist++;
            }
            curr = curr->get(ch);
        }
        
    }
    
};

int countDistinctSubstrings(string &s)
{

    Trie tr;
    for(int i = 0; i < s.length(); i++) {
        for(int j = i; j < s.length(); j++) {
            string str = s.substr(i, j - i + 1);
            tr.insert(str);
        }
    }
    return tr.dist;
}
