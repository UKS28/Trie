#include <bits/stdc++.h>
using namespace std;

struct TrieNode {
    TrieNode* children[2] = {nullptr, nullptr}; // Initialize to nullptr

    bool contains(int bit) {
        return children[bit] != nullptr;
    }

    void insertChild(int bit, TrieNode* node) {
        children[bit] = node;
    }

    TrieNode* getChild(int bit) {
        return children[bit];
    }
};

class Trie {
public:
    TrieNode* root;

    Trie() {
        root = new TrieNode();
    }

    void insert(int num) {
        TrieNode* curr = root;
        for (int bit = 31; bit >= 0; bit--) {
            int bitValue = (num & (1 << bit)) ? 1 : 0;
            if (!curr->contains(bitValue)) {
                curr->insertChild(bitValue, new TrieNode());
            }
            curr = curr->getChild(bitValue);
        }
    }

    int findMaxXOR(int num) {
        TrieNode* curr = root;
        int maxXor = 0;
        for (int bit = 31; bit >= 0; bit--) {
            int bitValue = (num & (1 << bit)) ? 1 : 0;
            // Prefer the opposite bit for maximizing XOR
            if (curr->contains(!bitValue)) {
                maxXor |= (1 << bit);
                curr = curr->getChild(!bitValue);
            } else {
                curr = curr->getChild(bitValue);
            }
        }
        return maxXor;
    }
};

int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) {
    Trie trie;
    for (int num : arr1) {
        trie.insert(num);
    }   
    int maxResult = 0; 
    for (int num : arr2) {
        maxResult = max(maxResult, trie.findMaxXOR(num));
    }
    return maxResult;
}
