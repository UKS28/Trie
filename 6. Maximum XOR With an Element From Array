#include <bits/stdc++.h>
using namespace std;

struct TrieNode {
    TrieNode* children[2] = {nullptr, nullptr};

    bool containsChild(int bit) {
        return children[bit] != nullptr;
    }

    void addChild(int bit, TrieNode* node) {
        children[bit] = node;
    }

    TrieNode* getChild(int bit) {
        return children[bit];
    }
};

class Trie {
public:
    TrieNode* root;
    
    Trie() {
        root = new TrieNode();
    }

    void insertNumber(int num) {
        TrieNode* current = root;
        for (int i = 31; i >= 0; i--) {
            int bitValue = (num & (1 << i)) ? 1 : 0;
            if (!current->containsChild(bitValue)) {
                current->addChild(bitValue, new TrieNode());
            }
            current = current->getChild(bitValue);
        }
    }

    int getMaxXor(int num) {
        TrieNode* current = root;
        int maxXor = 0;
        for (int bit = 31; bit >= 0; bit--) {
            int bitValue = (num & (1 << bit)) ? 1 : 0;
            if (current->containsChild(!bitValue)) {
                maxXor |= (1 << bit);
                current = current->getChild(!bitValue);
            } else {
                current = current->getChild(bitValue);
            }
        }
        return maxXor;
    }
};

class Solution {
    static bool compareQueries(vector<int>& a, vector<int>& b) {
        return a[0] < b[0];  // Sort queries by maxAllowed
    }

public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        sort(nums.begin(), nums.end());  // Sort numbers for efficient processing
        vector<vector<int>> sortedQueries(queries.size());

        for (int i = 0; i < queries.size(); i++) {
            sortedQueries[i] = {queries[i][1], queries[i][0], i};  // (maxAllowed, numToXor, queryIndex)
        }

        vector<int> results(queries.size(), -1);
        sort(sortedQueries.begin(), sortedQueries.end(), compareQueries);

        int numIndex = 0;
        Trie trie;
        
        for (auto& query : sortedQueries) {
            int queryIndex = query[2];  
            int numToXor = query[1];     
            int maxAllowed = query[0];   

            while (numIndex < nums.size() && nums[numIndex] <= maxAllowed) {
                trie.insertNumber(nums[numIndex]);
                numIndex++;
            }

            if (numIndex != 0) {
                results[queryIndex] = trie.getMaxXor(numToXor);
            }
        }
        return results;
    }
};
